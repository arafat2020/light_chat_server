generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ProvidorType {
  GOOGLE
  NATIVE
  GITHUB
  FACEBOOK
}

model Profile {
  id       String   @id @map("_id")
  userId   String   @unique
  name     String
  imageUrl String
  email    String   @unique
  lastSeen DateTime?

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  passward          String?
  providor          ProvidorType        @default(NATIVE)
  from              Friend[]            @relation("From")
  to                Friend[]            @relation("To")
  isaActive         Boolean             @default(false)
  roomInitiated     SingleChat[]        @relation("userOne")
  roomReceived      SingleChat[]        @relation("userTwo")
  SingleRoomMessage SingleRoomMessage[]
}

model Server {
  id         String @id @map("_id")
  name       String
  imageUrl   String
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @map("_id")
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isaActive Boolean  @default(false)

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @map("_id")
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String  @id @map("_id")
  content String
  u_id    String  @unique
  fileUrl String?

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @map("_id")

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model SingleChat {
  id String @id @map("_id")

  userOneId String
  userOne   Profile @relation("userOne", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId         String
  userTwo           Profile             @relation("userTwo", fields: [userTwoId], references: [id], onDelete: Cascade)
  SingleRoomMessage SingleRoomMessage[]

  @@unique([userOneId, userTwoId])
  @@index([userTwoId])
}

model Friend {
  id String @id @map("_id")

  fromId String
  from   Profile @relation("From", fields: [fromId], references: [id], onDelete: Cascade)

  toId String
  to   Profile @relation("To", fields: [toId], references: [id], onDelete: Cascade)

  acceepted Boolean @default(false)
  blocked   Boolean @default(false)

  @@unique([fromId, toId])
  @@index([fromId])
}

model DirectMessage {
  id      String  @id @map("_id")
  content String
  fileUrl String?
  uuid    String  @unique

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

model SingleRoomMessage {
  id           String     @id @map("_id")
  content      String
  fileUrl      String?
  uuid         String     @unique
  userId       String
  member       Profile    @relation(fields: [userId], references: [id], onDelete: Cascade)
  singleChatId String
  singlechat   SingleChat @relation(fields: [singleChatId], references: [id], onDelete: Cascade)
  deleted      Boolean    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([singleChatId])
}
